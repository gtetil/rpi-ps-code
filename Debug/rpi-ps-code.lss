
rpi-ps-code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000012c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000540  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a1  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000266  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	1e d0       	rcall	.+60     	; 0x78 <main>
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_2>:
			DO_PORT &= ~(1 << PWR_ON_OUTPUT);  // turn off PWR_ON_OUTPUT (disables power supply to RPi)
			sleep_flag = 1;
		}
	}
	
}
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	b0 99       	sbic	0x16, 0	; 22
  4e:	05 c0       	rjmp	.+10     	; 0x5a <__vector_2+0x1a>
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ignition_state>
  56:	c1 9a       	sbi	0x18, 1	; 24
  58:	02 c0       	rjmp	.+4      	; 0x5e <__vector_2+0x1e>
  5a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ignition_state>
  5e:	8f 91       	pop	r24
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <_Z16initPCinterruptsv>:

void initPCinterrupts(void) {
	
	GIMSK |= (1 << PCIE);   // pin change interrupt enable
  6a:	8b b7       	in	r24, 0x3b	; 59
  6c:	80 62       	ori	r24, 0x20	; 32
  6e:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1 << PCINT0); // pin change interrupt enabled for IGN_INPUT (PCINT0)
  70:	a8 9a       	sbi	0x15, 0	; 21
	PCMSK |= (1 << PCINT2); // pin change interrupt enabled for RPI_INPUT (PCINT2)
  72:	aa 9a       	sbi	0x15, 2	; 21
	sei();                  // enable interrupts
  74:	78 94       	sei
  76:	08 95       	ret

00000078 <main>:
}

int main(void)
{
	// -------- Inits --------- //
	DI_PORT_DDR &= ~(1 << IGN_PIN);  // set IGN_INPUT pin as input
  78:	b8 98       	cbi	0x17, 0	; 23
	DI_PORT_DDR &= ~(1 << RPI_PIN);  // set RPI_INPUT pin as input
  7a:	ba 98       	cbi	0x17, 2	; 23
	
	DO_PORT_DDR |= (1 << PWR_ON_OUTPUT);  // set PWR_ON_OUTPUT pin as output
  7c:	b9 9a       	sbi	0x17, 1	; 23
	
	initPCinterrupts();
  7e:	f5 df       	rcall	.-22     	; 0x6a <_Z16initPCinterruptsv>
	
    while (1) {
		
		if (sleep_flag) {
  80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  84:	88 23       	and	r24, r24
  86:	f1 f3       	breq	.-4      	; 0x84 <main+0xc>
			
			sleep_flag = 0;
  88:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			cli(); // Disable interrupts
  8c:	f8 94       	cli
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	87 7e       	andi	r24, 0xE7	; 231
  92:	80 61       	ori	r24, 0x10	; 16
  94:	85 bf       	out	0x35, r24	; 53
			sleep_enable();
  96:	85 b7       	in	r24, 0x35	; 53
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	85 bf       	out	0x35, r24	; 53
			sleep_bod_disable();
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	84 68       	ori	r24, 0x84	; 132
  a0:	85 bf       	out	0x35, r24	; 53
  a2:	8b 7f       	andi	r24, 0xFB	; 251
  a4:	85 bf       	out	0x35, r24	; 53
			sei();
  a6:	78 94       	sei
			sleep_cpu();
  a8:	88 95       	sleep
			// the AVR now sleeps until IGN_INPUT turns on...
			sleep_disable();
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	85 bf       	out	0x35, r24	; 53
			sei(); // enable interrupts
  b0:	78 94       	sei
  b2:	e6 cf       	rjmp	.-52     	; 0x80 <main+0x8>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
